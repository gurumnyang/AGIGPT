<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AGIGPT Chat</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="/js/socket.io.js"></script>
    <style>
      body {
        height: 100vh;
        display: flex;
        flex-direction: column;
        background-color: #121212;
        color: #ffffff;
      }
      #chatLog {
        flex: 1;
        overflow-y: auto;
        padding: 15px;
        border: 1px solid #424242;
        border-radius: 0.5rem;
        background-color: #1e1e1e;
        margin-bottom: 15px;
        white-space: pre-wrap; /* Preserve whitespace and line breaks */
      }
      #chatLog strong {
        min-width:5rem;
        font-size: 1rem;
        text-align: left;
      }
      #chatLog P {
        background-color: #2c2c2c;
        padding: 10px;
        border-radius: calc(0.5rem + 10px);
        margin: 0;
        font-size: 1rem;
        text-align: left;
      }
      #chatLog div.new-message {
        animation: fadeIn 0.3s ease-in-out;
      }
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      #chatContainer {
        flex: 1;
        display: flex;
        flex-direction: column;
      }
      #inputContainer {
        position: sticky;
        bottom: 0;
        background-color: #1e1e1e;
        padding: 10px;
        border-top: 1px solid #424242;
      }
      #sendBtn {
        min-width: 70px;
      }
      .form-control {
        background-color: #2c2c2c;
        color: #ffffff;
        border: 1px solid #424242;
      }
      .form-control::placeholder {
        color: #b0b0b0;
      }
      .form-control:focus {
        background-color: #2c2c2c;
        color: #ffffff;
        border-color: #ffffff;
        box-shadow: none;
      }
      .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
      }
      .btn-primary:hover {
        background-color: #0056b3;
        border-color: #004085;
      }
      .modal-content {
        background-color: #1e1e1e;
        color: #ffffff;
        border: 1px solid #424242;
      }
      .modal-header {
        border-bottom: 1px solid #424242;
      }
      .modal-footer {
        border-top: 1px solid #424242;
      }
      .btn-close {
        filter: invert(1);
      }
    </style>
  </head>
  <body>
    <div class="container d-flex flex-column h-100" id="chatContainer">
      <div class="d-flex justify-content-between align-items-center py-3">
        <h1 class="text-center">AGIGPT Chat Interface</h1>
        <button id="settingsBtn" class="btn btn-secondary">설정</button>
      </div>
      <div id="chatLog" class="mb-3"></div>
      <div id="inputContainer" class="d-flex">
        <input 
          type="text" 
          id="userInput" 
          class="form-control me-2 p-3" 
          placeholder="명령을 입력하세요" 
        />
        <button id="sendBtn" class="btn btn-primary">전송</button>
      </div>
    </div>

    <!-- Settings Modal -->
    <div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="settingsModalLabel">설정</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="showSystemMessages" checked>
              <label class="form-check-label" for="showSystemMessages">
                시스템 메시지 표시
              </label>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
          </div>
        </div>
      </div>
    </div>

    <script>
      //socket
      const socket = io(window.location.origin);

      const chatLog = document.getElementById("chatLog");
      const userInput = document.getElementById("userInput");
      const sendBtn = document.getElementById("sendBtn");
      const settingsBtn = document.getElementById("settingsBtn");
      const showSystemMessagesCheckbox = document.getElementById("showSystemMessages");

      let showSystemMessages = true;

      settingsBtn.addEventListener("click", () => {
        const settingsModal = new bootstrap.Modal(document.getElementById('settingsModal'));
        settingsModal.show();
      });

      showSystemMessagesCheckbox.addEventListener("change", () => {
        showSystemMessages = showSystemMessagesCheckbox.checked;
        const systemMessages = chatLog.querySelectorAll("div[data-role='system']");
        systemMessages.forEach(message => {
          message.style.display = showSystemMessages ? 'flex' : 'none';
          message.style.setProperty('display', showSystemMessages ? 'flex' : 'none', 'important');
        });
      });

      const sendMessage = () => {
        const message = userInput.value;
        if (!message) return;
        userInput.value = "";

        socket.emit('userPrompt', { message });
      };

      sendBtn.addEventListener("click", sendMessage);

      userInput.addEventListener("keypress", (event) => {
        if (event.key === "Enter") {
          event.preventDefault();
          sendMessage();
        }
      });

      socket.on('conversationUpdate', (data) => {
        console.log(data);


        //escape data.content and trim
        data.content = data.content.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        data.content = data.content.trim();

        const newMessage = document.createElement('div');
        newMessage.classList.add('d-flex', 'new-message');
        newMessage.setAttribute('data-role', data.role);
        
        if(data.role === 'system'){
          newMessage.style.display = showSystemMessages ? 'flex' : 'none';
          newMessage.style.setProperty('display', showSystemMessages ? 'flex' : 'none', 'important');
        }
        newMessage.innerHTML = `<strong>${data.role}:</strong><p class="ms-3 my-2">${data.content}</p>`;
        chatLog.appendChild(newMessage);
        chatLog.scrollTop = chatLog.scrollHeight; // Scroll to bottom
        setTimeout(() => {
          newMessage.classList.remove('new-message');
        }, 300);
      });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>
